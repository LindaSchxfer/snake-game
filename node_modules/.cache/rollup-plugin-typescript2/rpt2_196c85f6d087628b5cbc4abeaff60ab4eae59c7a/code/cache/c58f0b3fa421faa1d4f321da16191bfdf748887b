{"code":"//this is the main game logic\r\nimport { PIXELSIZE, COLORS, HEIGHT, MAX_LEVEL, SCALE, SPEED, WIDTH } from \"./constants\";\r\nimport { Playground as Playground } from \"./playground\";\r\nimport { Snake } from \"./snake\";\r\nexport class Game {\r\n    constructor() {\r\n        this.score = 0;\r\n        this.controlFunction = false;\r\n        this.nextMove = 0;\r\n        //Div angelegt\r\n        this.div = document.createElement(\"div\");\r\n        this.div.setAttribute(\"id\", \"playground\");\r\n        //Canvas angelegt\r\n        this.canvas = document.createElement('Canvas');\r\n        this.div.appendChild(this.canvas);\r\n        //Exit Button angelegt\r\n        this.buttonExit = document.createElement(\"button\");\r\n        this.buttonExit.onclick = this.exit.bind(this);\r\n        this.buttonExit.innerText = \"Exit\";\r\n        this.buttonExit.setAttribute(\"class\", \"exitdesign\");\r\n        this.div.appendChild(this.buttonExit);\r\n        // canvas element size in the page\r\n        this.canvas.style.width = WIDTH * PIXELSIZE + 'px';\r\n        this.canvas.style.height = HEIGHT * PIXELSIZE + 'px';\r\n        //Menü div abspeichern um bei exit wieder einzublenden\r\n        this.wrapper = document.getElementById(\"wrapper\");\r\n        // configuration\r\n        this.setting = {\r\n            level: 0,\r\n            speed: SPEED,\r\n            width: this.canvas.width,\r\n            height: this.canvas.height,\r\n            nbPixelX: WIDTH,\r\n            nbPixelY: HEIGHT,\r\n            pixelWidth: this.canvas.width / WIDTH,\r\n            pixelHeight: this.canvas.height / HEIGHT,\r\n            color: COLORS[0]\r\n        };\r\n        this.snake = new Snake(this);\r\n        this.playground = new Playground(this);\r\n        // sobald man eine Pfeiltaste drückt wird die onkeydown funktion aufgerufen\r\n        window.addEventListener('keydown', this.onKeyDown.bind(this), false);\r\n        document.body.appendChild(this.div);\r\n    }\r\n    //Start des Spieles\r\n    start() {\r\n        this.nextMove = 0;\r\n        this.controlFunction = true;\r\n        //Zum rendern einzelner Frames\r\n        requestAnimationFrame(this.loop.bind(this));\r\n    }\r\n    //Spiel stoppen\r\n    stop() {\r\n        this.controlFunction = false;\r\n    }\r\n    //ls: Stoppt das Spiel mit dem Button Exit\r\n    exit() {\r\n        this.stop();\r\n        this.div.remove();\r\n        //ls: zuvor versteckter wrapper soll wieder erscheinen um erneut eine Auswahl zu treffen\r\n        if (this.wrapper != null) {\r\n            this.wrapper.style.display = \"block\";\r\n        }\r\n    }\r\n    getSettings() {\r\n        return this.setting;\r\n    }\r\n    loop(time) {\r\n        console.log(\"time\", time);\r\n        console.log(\"nextmove\", this.nextMove);\r\n        //stopp falls controlFunction gleich false\r\n        if (this.controlFunction) {\r\n            //rekursion (funktion ruft sich immer wider selbst auf)\r\n            requestAnimationFrame(this.loop.bind(this));\r\n            if (time >= this.nextMove) {\r\n                this.nextMove = time + this.setting.speed;\r\n                // move once\r\n                this.snake.move();\r\n                // check what happened\r\n                switch (this.checkCondition()) {\r\n                    case -1:\r\n                        this.die();\r\n                        break;\r\n                    case 1:\r\n                        this.snake.lengthen();\r\n                        this.score += 100;\r\n                        this.playground.eatKiwi(this.snake.getSnakeHead());\r\n                        if (this.playground.isDone()) {\r\n                            this.levelUp();\r\n                        }\r\n                    default:\r\n                        // update display\r\n                        this.display(time);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    display(time) {\r\n        const { width, height, color, level } = this.setting;\r\n        const context = this.canvas.getContext(\"2d\");\r\n        // background\r\n        context.fillStyle = color;\r\n        context.fillRect(0, 0, width, height);\r\n        // level\r\n        context.font = height + \"px Roboto Condensed\";\r\n        context.textBaseline = \"middle\";\r\n        context.textAlign = \"center\";\r\n        context.fillStyle = \"rgba(0,0,0,0.1)\";\r\n        context.fillText(String(level + 1), width / 2, height / 2);\r\n        // score\r\n        context.font = 35 * SCALE + \"px Roboto Condensed\";\r\n        context.textAlign = \"left\";\r\n        context.textBaseline = \"top\";\r\n        context.fillStyle = \"rgba(0,0,0,0.25)\";\r\n        context.fillText(String(this.score), 10 * SCALE, 10 * SCALE);\r\n        // playground\r\n        this.playground.draw(time, context);\r\n        // snake\r\n        this.snake.draw(time, context);\r\n    }\r\n    checkCondition() {\r\n        const cell = this.snake.getSnakeHead();\r\n        // left the play area or ate itself??\r\n        if (this.isOutside(cell) || this.snake.isSnake(cell)) {\r\n            // dead\r\n            return -1;\r\n        }\r\n        // ate kiwi?\r\n        if (this.playground.isKiwi(cell)) {\r\n            return 1;\r\n        }\r\n        // nothing special\r\n        return 0;\r\n    }\r\n    levelUp() {\r\n        this.score += 1000;\r\n        this.setting.level++;\r\n        if (this.setting.level < MAX_LEVEL) {\r\n            this.setting.speed -= 7;\r\n            this.setting.color = COLORS[this.setting.level];\r\n            this.playground.scatter();\r\n        }\r\n        else {\r\n            this.win();\r\n        }\r\n    }\r\n    win() {\r\n        alert(\"Congrats you beat Linda´s Snake Game!\\r\\n\\r\\nFinal Score: \" + this.score);\r\n        this.stop();\r\n    }\r\n    die() {\r\n        alert(\"You died.\\r\\n\\r\\nFinal Score: \" + this.score);\r\n        this.stop();\r\n    }\r\n    isOutside(pixel) {\r\n        const { nbPixelX: nbCellsX, nbPixelY: nbCellsY } = this.setting;\r\n        return pixel.x < 0 || pixel.x >= nbCellsX || pixel.y < 0 || pixel.y >= nbCellsY;\r\n    }\r\n    onKeyDown(event) {\r\n        switch (event.key) {\r\n            case 'ArrowUp':\r\n                event.preventDefault();\r\n                this.snake.setDirection('Up');\r\n                break;\r\n            case 'ArrowDown':\r\n                event.preventDefault();\r\n                this.snake.setDirection('Down');\r\n                break;\r\n            case 'ArrowLeft':\r\n                event.preventDefault();\r\n                this.snake.setDirection('Left');\r\n                break;\r\n            case 'ArrowRight':\r\n                event.preventDefault();\r\n                this.snake.setDirection('Right');\r\n                break;\r\n        }\r\n    }\r\n}\r\n","references":["C:/Users/Linda/OneDrive/Desktop/snake-game/src/pixel.ts","C:/Users/Linda/OneDrive/Desktop/snake-game/src/constants.ts","C:/Users/Linda/OneDrive/Desktop/snake-game/src/playground.ts","C:/Users/Linda/OneDrive/Desktop/snake-game/src/snake.ts"]}
