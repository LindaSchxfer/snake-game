{"code":"// this is the playground\r\nimport { Pixel } from \"./pixel\";\r\nimport { KIWI, SCALE } from \"./constants\";\r\nexport class Playground {\r\n    constructor(game) {\r\n        this.game = game;\r\n        this.kiwi = [];\r\n        this.scatter();\r\n    }\r\n    scatter() {\r\n        const { nbPixelX: nbCellsX, nbPixelY: nbCellsY, level } = this.game.getSettings();\r\n        const nbKiwi = KIWI * (level + 1);\r\n        for (let count = 0; count < nbKiwi; count++) {\r\n            let x = Math.floor(Math.random() * nbCellsX);\r\n            let y = Math.floor(Math.random() * nbCellsY);\r\n            this.kiwi.push(new Pixel(x, y));\r\n        }\r\n    }\r\n    draw(time, context) {\r\n        const { width, height, pixelWidth: cellWidth, pixelHeight: cellHeight } = this.game.getSettings();\r\n        context.fillStyle = 'black';\r\n        context.lineWidth = 1 * SCALE;\r\n        for (let x = 0; x <= width; x += cellWidth) {\r\n            context.beginPath();\r\n            context.moveTo(x, 0);\r\n            context.lineTo(x, height);\r\n            context.stroke();\r\n        }\r\n        for (let y = 0; y <= height; y += cellHeight) {\r\n            context.beginPath();\r\n            context.moveTo(0, y);\r\n            context.lineTo(width, y);\r\n            context.stroke();\r\n        }\r\n        // kiwi\r\n        context.fillStyle = 'red';\r\n        this.kiwi.forEach(cell => context.fillRect(cellWidth * cell.x, cellHeight * cell.y, cellWidth, cellHeight));\r\n    }\r\n    isKiwi(cell) {\r\n        return this.kiwi.find(el => cell.x == el.x && cell.y == el.y);\r\n    }\r\n    eatKiwi(pixel) {\r\n        this.kiwi = this.kiwi.filter(el => pixel.x != el.x || pixel.y != el.y);\r\n    }\r\n    isDone() {\r\n        return this.kiwi.length == 0;\r\n    }\r\n}\r\n","references":["C:/Users/Linda/OneDrive/Desktop/snake-game/src/pixel.ts","C:/Users/Linda/OneDrive/Desktop/snake-game/src/constants.ts","C:/Users/Linda/OneDrive/Desktop/snake-game/src/index.ts"]}
