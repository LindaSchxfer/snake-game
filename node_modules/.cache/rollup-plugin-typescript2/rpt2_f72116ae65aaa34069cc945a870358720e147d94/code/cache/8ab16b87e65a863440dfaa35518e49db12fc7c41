{"code":"//this is the mode ON20-Special\r\nimport { Game } from \"./game\";\r\nimport { SCALE, bricksSpecial } from \"./constants\";\r\nexport class OnSpecial extends Game {\r\n    constructor() {\r\n        super();\r\n    }\r\n    display(time) {\r\n        const { width, height, color, level } = this.setting;\r\n        const context = this.canvas.getContext(\"2d\");\r\n        // background\r\n        context.fillStyle = color;\r\n        context.fillRect(0, 0, width, height);\r\n        // level\r\n        context.font = height + 'px Roboto Condensed';\r\n        context.textBaseline = 'middle';\r\n        context.textAlign = 'center';\r\n        context.fillStyle = 'rgba(0,0,0,0.1)';\r\n        context.fillText(String(level + 1), width / 2, height / 2);\r\n        // score\r\n        context.font = 35 * SCALE + 'px Roboto Condensed';\r\n        context.textAlign = 'left';\r\n        context.textBaseline = 'top';\r\n        context.fillStyle = 'rgba(0,0,0,0.25)';\r\n        context.fillText(String(this.score), 10 * SCALE, 10 * SCALE);\r\n        // playground\r\n        this.playground.draw(time, context);\r\n        //ls: ON20 Special \r\n        const { pixelWidth: cellWidth, pixelHeight: cellHeight } = this.setting;\r\n        context.fillStyle = 'rgb(52,52,52)';\r\n        bricksSpecial.forEach(cell => context.fillRect(cellWidth * cell.x, cellHeight * cell.y, cellWidth, cellHeight));\r\n        // snake\r\n        this.snake.draw(time, context);\r\n    }\r\n    checkCondition() {\r\n        const cell = this.snake.getSnakeHead();\r\n        // left the play area or ate itself?? \r\n        //ls: OO20 Special check condition added\r\n        if (this.isOutside(cell) || this.snake.isSnake(cell) || this.crashedInBricks(cell)) {\r\n            // dead\r\n            return -1;\r\n        }\r\n        // ate kiwi?\r\n        if (this.playground.isKiwi(cell)) {\r\n            return 1;\r\n        }\r\n        // nothing special\r\n        return 0;\r\n    }\r\n    //ls: On20 Special function: if Snake crashed in Bricks? --> true\r\n    crashedInBricks(pixel) {\r\n        return bricksSpecial.find(el => pixel.x == el.x && pixel.y == el.y);\r\n    }\r\n}\r\n","references":["C:/Users/Linda/OneDrive/Desktop/snake-game/src/pixel.ts","C:/Users/Linda/OneDrive/Desktop/snake-game/src/game.ts","C:/Users/Linda/OneDrive/Desktop/snake-game/src/constants.ts"]}
