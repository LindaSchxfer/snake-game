{"code":"// this is the snake\r\nimport { Pixel } from \"./pixel\";\r\nimport { PIXELSIZE, SCALE } from \"./constants\";\r\nexport class Snake {\r\n    constructor(game) {\r\n        this.ORIGINAL_SIZE = 3;\r\n        this.ORININAL_DIRECTION = 'Right';\r\n        this.ORIGINAL_POSITION = { x: 1, y: 1 };\r\n        this.game = game;\r\n        this.size = this.ORIGINAL_SIZE;\r\n        this.snakeDirection = [this.ORININAL_DIRECTION];\r\n        // original head\r\n        this.snakeHead = new Pixel(this.ORIGINAL_POSITION.x, this.ORIGINAL_POSITION.y);\r\n        // original tail\r\n        this.snakeTail = [];\r\n    }\r\n    setDirection(direction) {\r\n        const lastDirection = this.snakeDirection[this.snakeDirection.length - 1];\r\n        if (lastDirection == \"Up\" && (direction == \"Down\" || direction == \"Up\")) {\r\n            return;\r\n        }\r\n        if (lastDirection == \"Down\" && (direction == \"Up\" || direction == \"Down\")) {\r\n            return;\r\n        }\r\n        if (lastDirection == \"Left\" && (direction == \"Right\" || direction == \"Left\")) {\r\n            return;\r\n        }\r\n        if (lastDirection == \"Right\" && (direction == \"Left\" || direction == \"Right\")) {\r\n            return;\r\n        }\r\n        this.snakeDirection.push(direction);\r\n    }\r\n    move() {\r\n        // add current head to tail\r\n        this.snakeTail.push(this.snakeHead);\r\n        // get next position\r\n        this.snakeHead = this.getNext();\r\n        // fix the snake size\r\n        if (this.snakeTail.length > this.size) {\r\n            this.snakeTail.splice(0, 1);\r\n        }\r\n    }\r\n    getNext() {\r\n        const direction = this.snakeDirection.length > 1 ? this.snakeDirection.splice(0, 1)[0] : this.snakeDirection[0];\r\n        switch (direction) {\r\n            case \"Up\":\r\n                return new Pixel(this.snakeHead.x, this.snakeHead.y - 1);\r\n            case \"Right\":\r\n                return new Pixel(this.snakeHead.x + 1, this.snakeHead.y);\r\n            case \"Down\":\r\n                return new Pixel(this.snakeHead.x, this.snakeHead.y + 1);\r\n            case \"Left\":\r\n                return new Pixel(this.snakeHead.x - 1, this.snakeHead.y);\r\n        }\r\n        return new Pixel(0, 0);\r\n    }\r\n    draw(time, context) {\r\n        const { pixelWidth: cellWidth, pixelHeight: cellHeight } = this.game.getSettings();\r\n        // head\r\n        const size = PIXELSIZE * SCALE / 10;\r\n        const offset = PIXELSIZE * SCALE / 3;\r\n        const x = cellWidth * this.snakeHead.x;\r\n        const y = cellHeight * this.snakeHead.y;\r\n        context.fillStyle = \"#6200EE\";\r\n        context.fillRect(x, y, cellWidth, cellHeight);\r\n        // eyes\r\n        switch (this.snakeDirection[0]) {\r\n            case \"Up\":\r\n                context.beginPath();\r\n                context.arc(x + offset, y + offset, size, 0, 2 * Math.PI, false);\r\n                context.arc(x + 2 * offset, y + offset, size, 0, 2 * Math.PI, false);\r\n                context.fillStyle = \"white\";\r\n                context.fill();\r\n                break;\r\n            case \"Down\":\r\n                context.beginPath();\r\n                context.arc(x + offset, y + 2 * offset, size, 0, 2 * Math.PI, false);\r\n                context.arc(x + 2 * offset, y + 2 * offset, size, 0, 2 * Math.PI, false);\r\n                context.fillStyle = \"white\";\r\n                context.fill();\r\n                break;\r\n            case \"Right\":\r\n                context.beginPath();\r\n                context.arc(x + 2 * offset, y + offset, size, 0, 2 * Math.PI, false);\r\n                context.arc(x + 2 * offset, y + 2 * offset, size, 0, 2 * Math.PI, false);\r\n                context.fillStyle = 'white';\r\n                context.fill();\r\n                break;\r\n            case \"Left\":\r\n                context.beginPath();\r\n                context.arc(x + offset, y + offset, size, 0, 2 * Math.PI, false);\r\n                context.arc(x + offset, y + 2 * offset, size, 0, 2 * Math.PI, false);\r\n                context.fillStyle = \"white\";\r\n                context.fill();\r\n                break;\r\n        }\r\n        // tail\r\n        context.fillStyle = \"#BB86FC\";\r\n        this.snakeTail.forEach(cell => context.fillRect(cellWidth * cell.x, cellHeight * cell.y, cellWidth, cellHeight));\r\n    }\r\n    lengthen(qty = 3) {\r\n        this.size += qty;\r\n    }\r\n    shorten(qty = 3) {\r\n        this.size -= qty;\r\n    }\r\n    getSnakeHead() {\r\n        return this.snakeHead;\r\n    }\r\n    isSnake(pixel) {\r\n        return this.snakeTail.find(el => pixel.x == el.x && pixel.y == el.y);\r\n    }\r\n}\r\n","references":["C:/Users/Linda/OneDrive/Desktop/snake-game/src/pixel.ts","C:/Users/Linda/OneDrive/Desktop/snake-game/src/constants.ts","C:/Users/Linda/OneDrive/Desktop/snake-game/src/game.ts"]}
